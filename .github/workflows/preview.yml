name: Deploy Preview

on:
  issue_comment:
    types: [created]

jobs:
  deploy-preview:
    name: Deploy Preview
    # Only run for the deploy command
    if: github.event.issue.pull_request && contains(github.event.comment.body, '/deploy-preview')
    runs-on: ubuntu-latest
    steps:
      - name: Check commenter permissions
        id: check-permissions
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const commenter = context.payload.comment.user.login;
            const issue_number = context.payload.issue.number;

            // Check if this is a PR
            let pull;
            try {
              pull = await github.rest.pulls.get({
                owner,
                repo,
                pull_number: issue_number
              });
            } catch (error) {
              core.setFailed("This is not a pull request");
              return;
            }

            // Check commenter permissions
            try {
              const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
                owner,
                repo,
                username: commenter
              });
              
              if (!['admin', 'write'].includes(permission.permission)) {
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number,
                  body: `@${commenter} does not have sufficient permissions to trigger deployments.`
                });
                core.setFailed("Insufficient permissions");
                return;
              }
            } catch (error) {
              core.setFailed(`Error checking permissions: ${error.message}`);
              return;
            }

            // Save PR info for later steps, including the commit SHA
            const commit_sha = pull.data.head.sha;
            core.setOutput("pr_number", issue_number);
            core.setOutput("pr_sha", commit_sha);
            core.setOutput("short_sha", commit_sha.substring(0, 7));

            // Comment that deployment is starting
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: `üîÑ @${commenter} triggered a preview deployment for commit ${commit_sha.substring(0, 7)}. Deployment starting...`
            });

            return "Deployment authorized";

      # Download the specific build artifact that includes the commit SHA
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: pr-${{ steps.check-permissions.outputs.pr_number }}-${{ steps.check-permissions.outputs.pr_sha }}-build
          path: build

      # Setup Node.js for the deployment tools
      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Prepare deployment
        run: |
          mkdir -p ./deploy
          cp -r build/* ./deploy/
          cd ./deploy
          echo '{"name":"deploy","version":"1.0.0","private":true}' > package.json
          npm install wrangler@3 --save-dev

      - name: Deploy to Cloudflare Pages
        id: deploy
        working-directory: ./deploy
        run: |
          echo "Starting Cloudflare Pages preview deployment..."
          PR_NUMBER="${{ steps.check-permissions.outputs.pr_number }}"
          SHORT_SHA="${{ steps.check-permissions.outputs.short_sha }}"

          # Include commit SHA in branch name for traceability
          BRANCH_NAME="pr-${PR_NUMBER}-${SHORT_SHA}"

          npx wrangler pages deploy . --project-name=docs-docusaurus --commit-dirty=true --branch="${BRANCH_NAME}" 2>&1 | tee deploy.log

          # Check for errors in the log
          if grep -q "Error:" deploy.log; then
            echo "::error::Deployment failed. See logs for details."
            cat deploy.log
            exit 1
          fi

          # Extract deployment URL
          DEPLOY_URL=$(grep -o 'https://[^ ]*\.pages\.dev' deploy.log | head -n 1)

          if [ -n "$DEPLOY_URL" ]; then
            echo "DEPLOY_URL=$DEPLOY_URL" >> $GITHUB_OUTPUT
            echo "::notice::Deploy URL: $DEPLOY_URL"
          else
            echo "::error::Failed to extract deploy URL."
            cat deploy.log
            exit 1
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}

      - name: Comment on PR with preview URL
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            const url = '${{ steps.deploy.outputs.DEPLOY_URL }}';
            const sha = '${{ steps.check-permissions.outputs.short_sha }}';

            github.rest.issues.createComment({
              issue_number: ${{ steps.check-permissions.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Preview for commit ${sha} deployed!**\n\nüîó [View preview](${url})`
            });

      - name: Comment on deployment failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const sha = '${{ steps.check-permissions.outputs.short_sha }}';

            github.rest.issues.createComment({
              issue_number: ${{ steps.check-permissions.outputs.pr_number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚ùå **Deployment failed for commit ${sha}!**\n\nPlease check the workflow logs for details.`
            });
